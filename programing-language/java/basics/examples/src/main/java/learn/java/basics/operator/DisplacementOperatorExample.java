package learn.java.basics.operator;

import lombok.extern.slf4j.Slf4j;

/**
 * 位移运算符：
 * >>（带符号右移）：表示带符号位右移，将整数二进制（补码）的低位抹去，高位用原来的符号位补充；
 * >>>（无符号右移）：表示不带符号右移，将整数二进制（补码）的低位抹去，高位补 0；
 * <<（左移）：表示带符号左移，将整数二进制（补码）的高位抹去，低位补 0。
 */
@Slf4j
public class DisplacementOperatorExample {

    public static void main(String[] args) {
        // 1(int) 的二进制格式（补码）：  00000000000000000000000000000001   -> 1
        // 右移 1 位（1 >> 1）：        00000000000000000000000000000000   -> 0
        // 无符号右移 1 位（1 >>> 1）：  00000000000000000000000000000000   -> 0
        // 左移 1 位（1 << 1）：        00000000000000000000000000000010   -> 2
        log.info("  1 >> 1，补码：{}，十进制数：{}", Integer.toBinaryString(1 >> 1), (1 >> 1));
        log.info(" 1 >>> 1，补码：{}，十进制数：{}", Integer.toBinaryString(1 >>> 1), (1 >>> 1));
        log.info("  1 << 1，补码：{}，十进制数：{}", Integer.toBinaryString(1 << 1), (1 << 1));


        // -1(int) 的二进制格式（补码）：  11111111111111111111111111111111   -> -1
        // 右移 1 位（-1 >> 1）：        11111111111111111111111111111111   -> -1
        // 无符号右移 1 位（-1 >>> 1）：  01111111111111111111111111111111   -> 2^31 - 1
        // 左移 1 位（-1 << 1）：        11111111111111111111111111111110
        //                             11111111111111111111111111111101
        //                             10000000000000000000000000000010   -> -2
        log.info(" -1 >> 1，补码：{}，十进制数：{}", Integer.toBinaryString(-1 >> 1), (-1 >> 1));
        log.info("-1 >>> 1，补码：{}，十进制数：{}", Integer.toBinaryString(-1 >>> 1), (-1 >>> 1));
        log.info(" -1 << 1，补码：{}，十进制数：{}", Integer.toBinaryString(-1 << 1), (-1 << 1));
    }
}
