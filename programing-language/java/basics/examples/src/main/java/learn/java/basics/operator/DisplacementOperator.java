package learn.java.basics.operator;

import lombok.extern.slf4j.Slf4j;

/**
 * 位运算符
 * <p>
 * 带符号整数：最高一位表示正负，为 0 表示负数，为 1 表示正数。
 * 源码：符号位加上数字位的二进制表示。
 * 反码：正数，反码与原码相同；负数，反码为原码的符号位不变，数值位取反。
 * 补码：正数，补码和源码相同；负数，补码为原码的符号位不变，数值位取反再加 1。
 * <p>
 * 总结：
 * <p>
 * 正数：它的原码、反码、补码相同。
 * 负数：反码为原码符号位不变，数值位数取反；补码为原码符号位不变，数值位取反再加 1，即反码 + 1。
 * <p>
 * 在 Java 中所有的数都已补码的形式来表示，位移操作也是针对补码进行操作。
 * <p>
 * x >> 1：表示 x 右移 1 位，有符号位右移时，补码低位抹去，高位用原来的符号位补充。
 * x >>> 1：表示 x 无符号右移 1 位，无符号右移，补码低位抹去，高位补 0。
 * x << 1：表示 x 左移 1 位，左移时，补码高位抹去，低位补 0。
 */
@Slf4j
public class DisplacementOperator {

    public static void main(String[] args) {
        // 1
        log.info(" 1 的补码：{}", Integer.toBinaryString(1));
        // 10000000000000000000000000000001 原码
        // 11111111111111111111111111111111 补码，符号位不变，数值位取反加一
        log.info("-1 的补码：{}", Integer.toBinaryString(-1));
        // 针对补码取反
        // 10000000000000000000000000000000
        log.info("-1 取反：{}", Integer.toBinaryString(~-1));

        // 10000000000000000000000000000010 原码
        // 11111111111111111111111111111110 补码
        log.info("-2 的补码：{}", Integer.toBinaryString(-2));
        // 11111111111111111111111111111101 原码取反
        // 10000000000000000000000000000001 补码取反
        log.info("-2 取反：{}", Integer.toBinaryString(~-2));

        // 11111111111111111111111111111111 -1 的补码
        // 11111111111111111111111111111110 -2 的补码
        // 11111111111111111111111111111110 按位与（-2）
        log.info("-1 & -2： {}", Integer.toBinaryString(-1 & -2));
        // 11111111111111111111111111111111 -1 的补码
        // 11111111111111111111111111111110 -2 的补码
        // 11111111111111111111111111111111 按位与（-1）
        log.info("-1 | -2：{}", Integer.toBinaryString(-1 | -2));

        // 11111111111111111111111111111111 -1 的补码
        // 11111111111111111111111111111110 -2 的补码
        // 00000000000000000000000000000001 按位与（1）
        log.info("-1 ^ -2：{}", Integer.toBinaryString(-1 ^ -2));

        // 0
        log.info(" 1 >> 1：{}", Integer.toBinaryString(1 >> 1));
        // 0
        log.info(" 1 >>> 1：{}", Integer.toBinaryString(1 >>> 1));
        // 2
        log.info(" 1 << 1：{}", Integer.toBinaryString(1 << 1));
        // 11111111111111111111111111111111 -> 11111111111111111111111111111111 -> 10000000000000000000000000000001
        // -1
        log.info("-1 >> 1：{}", Integer.toBinaryString(-1 >> 1));
        // 11111111111111111111111111111111 -> 01111111111111111111111111111111 -> 01111111111111111111111111111111
        // 2^31-1
        log.info("-1 >>> 1：{}", Integer.toBinaryString(-1 >>> 1));
        // - 2
        log.info("-1 << 1：{}", Integer.toBinaryString(-1 << 1));
    }
}
